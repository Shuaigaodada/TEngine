from curses import window as cwindow
from typing import (
    Optional, List, Dict, 
    Any, Union, TextIO, 
    Tuple, Iterator, Callable)

# 这里的clickBox是代表设置时的点击区域
class ClickBox:
    def __init__( self, x: int, y: int, w: int, h: int ) -> None: ...
    def check( self, x: int, y: int ) -> bool: ...

# 被点击的区域，其中clicked是点击区域内的clickbox的名字
class ClickedBox:
    def __init__( 
                 self, 
                 x: int, 
                 y: int, 
                 bstate: int, 
                 clicked: Iterator[str] ) -> None: ...
    def init( self ) -> None: ...
    
class FileLoader:
    def __init__( self, path: str ) -> None: ...
    def as_string( self ) -> str: ...
    def as_file( self, mode: str ) -> TextIO: ...
    def as_lines( self ) -> List[str]: ...
    def as_json( self ) -> Dict[str, Any]: ...
    def as_object( self ) -> object: ...
    def write( self, data: Union[str, Dict, object] ) -> None: ...
    
class Resource:
    def __new__( cls, *args, **kwargs ) -> "Resource": ...
    def __init__( self, srcpath: Optional[str] = None ) -> None: ...
    def load( self, path: str, existok: bool = False ) -> FileLoader: ...

class FileLogger:
    def __new__( cls, *args, **kwargs ) -> "FileLogger": ...
    def __init__( self, path: Optional[str] = None, **open_kwargs: Dict[str, Any] ) -> None: ...
    def read( self ) -> str: ...
    def readlines( self ) -> List[str]: ...
    def update( self ) -> None: ...
    def open( self, mode = "a", *args, **kwargs ) -> None: ...
    def close( self ) -> None: ...
    def info( self, *msg: Tuple[str], sep: str = " " ) -> None: ...
    def warning( self, *msg: Tuple[str], sep: str = " " ) -> None: ...
    def error( self, *msg: Tuple[str], sep: str = " " ) -> None: ...
    def clear( self ) -> None: ...
    def set_excepthook( self ) -> None: ...

class Text:
    def __new__( cls, *args, **kwargs ) -> "Text": ...
    def __init__( self, string: str ) -> None: ...
    @property
    def click_box( self ) -> ClickBox: ...
    def set_clickbox( self, name: str ) -> None: ...
    def set_position( self, x: int, y: int ) -> None: ...
    def __str__( self ) -> str: ...
    def __repr__(self) -> str: ...
    def __iter__( self ) -> Iterator[str]: ...
    def find( self, item: Union[str, int] ) -> Union["Text", List["Text"]]: ...
    def findid( self, id: int ) -> Optional["Text"]: ...
  
class Renderer:
    def __new__( self, *args, **kwargs ) -> "Renderer": ...
    def __init__( self ) -> None: ...
    def create( self, name: str, fg: str, bg: str = "#000000" ) -> None: ...
    def load( self, path: str ) -> None: ...
    def save( self, path: str ) -> None: ...
    def load_cache( self, path: str ) -> None: ...
    def load_pairs( self, path: str ) -> None: ...
    def save_cache( self, path: str ) -> None: ...
    def save_pairs( self, path: str ) -> None: ...
    def start( self, *name: Tuple[str] ) -> None: ...
    def stop( self, *name: Tuple[str] ) -> None: ...
    def get_index( self, name: str ) -> int: ...
    def push_cache( self, name: str ) -> int: ...
    def convert( self, hex: str ) -> int: ...
    
class Screen:
    def __new__( cls, *args, **kwargs ) -> "Screen": ...
    def __init__( self ) -> None: ...
    @property
    def size( self ) -> Tuple[int, int]: ...
    @property
    def width( self ) -> int: ...
    @property
    def height( self ) -> int: ...
    def write( 
              self, 
              msg: Union[str, Text], 
              x: Optional[int] = None, 
              y: Optional[int] = None
              ) -> Text: ...
    def clear( self ) -> None: ...
    def clear_line( self, y: int ) -> None: ...
    def clrtobot( self ) -> None: ...
    def clrtoeol( self ) -> None: ...
    def update( self ) -> None: ...

class Mouse:
    def __new__( cls, *args, **kwargs ) -> "Mouse": ...
    def __init__( self ) -> None: ...
    def init( self, interval: int = 0, drag: bool = False ) -> None: ...
    def clear_cb( self ) -> None: ...
    def pop_cb( self, name: str ) -> None: ...
    def set_cb( self, name: str, x: int, y: int, w: int, h: int) -> None: ...
    def check( self, x: int, y: int, bstate: int ) -> Iterator[str]: ...
    def get( self ) -> ClickedBox: ...
    
class Input:
    def __new__( cls, *args, **kwargs ) -> "Input": ...
    def __init__( self ) -> None: ...
    def getch( self, __timeout: float = -1 ) -> int: ...
    def getwch( self, __timeout: float = -1 ) -> str: ...
    # 手动解码, 支持coding
    def get( self, coding: str = "utf-8", timeout: float = -1 ) -> str: ...
    def getline( 
                self, 
                __msg: str = "", 
                quitkey: str = '\n', 
                coding: str = "utf-8", 
                cursor: int = 1, 
                mask: Optional[str] = None, 
                clreol: Optional[bool] = True, 
                check: Optional[Callable] = None ) -> str: ...
    @property
    def delay( self ) -> bool: ...
    @delay.setter
    def delay( self, value: bool ) -> None: ...
    def init( self ) -> None: ...
    
class Engine:
    def __new__( cls, *args, **kwargs ) -> "Engine": ...
    def __init__( self ) -> None: ...
    @property
    def logger( self ) -> Optional[FileLogger]: ...
    @logger.setter
    def logger( self, logger: FileLogger ) -> None: ...
    @property
    def stdscr( self ) -> Optional[cwindow]: ...
    @stdscr.setter
    def stdscr( self, stdscr: cwindow ) -> None: ...
    def init_engine( self, __reg: bool = True ) -> None: ...
    def quit( self ) -> None: ...
    @property
    def size( self ) -> Tuple[int, int]: ...
    @property
    def width( self ) -> int: ...
    @property
    def height( self ) -> int: ...


